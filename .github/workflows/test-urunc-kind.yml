name: Test urunc deploy with kind
on:
  push:
    branches:
      - feat/kind-workflow 
  workflow_call:
    inputs:
      ref:
        type: string
        default: ''
      skip-build:
        description: 'Skip the build job?'
        required: false
        default: "no"
        type: string
      skip-lint:
        description: 'Skip the lint job?'
        required: false
        default: "no"
        type: string
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64", "arm64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
    secrets:
      GIT_CLONE_PAT:
        required: false
  workflow_dispatch:

jobs:
  test:
    name: urunc-deploy-with-kind
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-22.04
          - arch: arm64
            runner: ubuntu-22.04-arm
      fail-fast: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
        cache: false

    - name: Install base dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget build-essential libseccomp-dev pkg-config bc make 
    - name: Install kind
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
        elif [ "$ARCH" = "aarch64" ]; then
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-arm64
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
    - name: Create kind configuration
      run: |
        cat <<EOF > kind-config.yaml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
          - role: control-plane
            extraMounts:
              - hostPath: /dev/kvm
                containerPath: /dev/kvm
        networking:
          apiServerPort: 6443        
        EOF
    - name: Create kind cluster
      run: |
        sudo kind create cluster --name urunc-test --config kind-config.yaml
    - name: Install dependencies inside kind node
      run: |
        docker exec urunc-test-control-plane apt-get update
        docker exec urunc-test-control-plane apt-get install -y git wget build-essential libseccomp-dev pkg-config bc
    - name: Install runc inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          if ! which runc; then
            RUNC_VERSION=$(curl -s https://api.github.com/repos/opencontainers/runc/releases/latest | grep "tag_name" | cut -d\" -f4 | sed "s/v//")
            wget -q https://github.com/opencontainers/runc/releases/download/v$RUNC_VERSION/runc.$(dpkg --print-architecture)
            chmod +x runc.$(dpkg --print-architecture)
            mv runc.$(dpkg --print-architecture) /usr/local/sbin/runc
          fi
        '
    - name: Configure containerd inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          systemctl status containerd || containerd &
          mkdir -p /etc/containerd
          containerd config default > /etc/containerd/config.toml
        '
    - name: Set snapshotter to overlayfs
      run: |
        docker exec urunc-test-control-plane bash -c \
        'sed -i "s/snapshotter = \"devmapper\"/snapshotter = \"overlayfs\"/g" /etc/containerd/config.toml'

    - name: Install Go inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          set -e
          GO_VERSION=1.24.1
          ARCH=$(dpkg --print-architecture)
          wget -q https://go.dev/dl/go${GO_VERSION}.linux-${ARCH}.tar.gz
          tar -C /usr/local -xzf go${GO_VERSION}.linux-${ARCH}.tar.gz
          ln -s /usr/local/go /usr/local/go${GO_VERSION}
          export PATH=$PATH:/usr/local/go/bin
          go version
          rm go${GO_VERSION}.linux-${ARCH}.tar.gz
        ' 
    - name: Build and install urunc inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          set -e
          export PATH=$PATH:/usr/local/go/bin
          git clone https://github.com/nubificus/urunc.git
          cd urunc
          make
          make install
          cd ..
        '
    - name: Install QEMU inside kind node
      run: |
        docker exec urunc-test-control-plane apt-get install -y qemu-system
        qemu-system-x86_64 --version

    - name: Install Firecracker inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          ARCH=$(uname -m)
          VERSION="v1.7.0"
          curl -L https://github.com/firecracker-microvm/firecracker/releases/download/${VERSION}/firecracker-${VERSION}-${ARCH}.tgz | tar -xz
          mv release-${VERSION}-${ARCH}/firecracker-${VERSION}-${ARCH} /usr/local/bin/firecracker
          rm -fr release-${VERSION}-${ARCH}
          firecracker --version
        '
    - name: Install Solo5 inside kind node
      run: |
        docker exec urunc-test-control-plane bash -c '
          git clone -b v0.9.0 https://github.com/Solo5/solo5.git
          cd solo5
          ./configure.sh && make -j$(nproc)
          cp tenders/hvt/solo5-hvt /usr/local/bin
          cp tenders/spt/solo5-spt /usr/local/bin
          cd ..
          rm -rf solo5
          solo5-hvt --version 
        '
    - name: Add urunc to containerd config
      run: |
        docker exec urunc-test-control-plane bash -c '
        cat <<EOF | tee -a /etc/containerd/config.toml
          [plugins."io.containerd.grpc.v1.cri".containerd]
            default_runtime_name = "urunc"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.urunc]
            runtime_type = "io.containerd.urunc.v2"
            container_annotations = ["com.urunc.unikernel.*"]
            pod_annotations = ["com.urunc.unikernel.*"]
            snapshotter = "overlayfs"
        EOF
        ls -la /usr/local/bin/urunc*
        ls -la /usr/local/bin/containerd-shim-urunc-v2*
        chmod +x /usr/local/bin/containerd-shim-urunc-v2*

        systemctl restart containerd || {
          pkill -f containerd
          nohup containerd >/var/log/containerd.log 2>&1 &
        }
        sleep 15
      
        ps aux | grep [c]ontainerd || { echo "containerd failed to start"; exit 1; }
        systemctl status containerd 
        ' 

    - name: Verify urunc installation
      run: |
        docker exec urunc-test-control-plane bash -c '
        ls -la /usr/local/bin/urunc*
        ls -la /usr/local/bin/containerd-shim-urunc-v2*
        '

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - name: Set up kubectl config
      run: |
        mkdir -p ~/.kube
        kind get kubeconfig --name urunc-test > ~/.kube/config
        chmod 600 ~/.kube/config
        export KUBECONFIG=~/.kube/config
        kubectl config use-context kind-urunc-test
        # Verify cluster connection
        kubectl cluster-info
        # Wait for API server to be ready
        kubectl wait --for=condition=Ready nodes --all --timeout=200s
    - name: Create RuntimeClass
      run: |
        cat <<EOF | kubectl apply -f -
          kind: RuntimeClass
          apiVersion: node.k8s.io/v1
          metadata:
            name: urunc
          handler: urunc
        EOF
    - name: Deploy NGINX unikernel
      run: |
        cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Pod
            metadata:
              name: nginx-urunc
              labels:
                run: nginx-urunc
            spec:
              runtimeClassName: urunc
              containers:
                - name: nginx
                  image: harbor.nbfc.io/nubificus/urunc/nginx-qemu-unikraft-initrd:latest
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 80
                    protocol: TCP
                  resources:
                    requests:
                      cpu: 10m
        EOF
    - name: Verify deployment
      run: |
        kubectl wait --for=condition=Ready pod/nginx-urunc --timeout=60s
        kubectl logs nginx-urunc

    - name: Debug pod failure
      if: failure()
      run: |
        echo "=== Describe Pod ==="
        kubectl describe pod nginx-urunc || true
        echo "=== Logs ==="
        kubectl logs nginx-urunc || true
        echo "=== Containerd Config ==="
        docker exec urunc-test-control-plane cat /etc/containerd/config.toml || true
        containerd --version
